{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _fns = require(\"@react-pdf/fns\");\n\nvar _trim = _interopRequireDefault(require(\"../attributedString/trim\"));\n\nvar _append = _interopRequireDefault(require(\"../attributedString/append\"));\n\nvar ELLIPSIS_UNICODE = 8230;\nvar ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);\n/**\n * Get ellipsis codepoint. This may be different in standard and embedded fonts\n *\n * @param  {number}  font\n * @return {Object} ellipsis codepoint\n */\n\nvar getEllipsisCodePoint = function getEllipsisCodePoint(font) {\n  if (!font.encode) return ELLIPSIS_UNICODE;\n\n  var _font$encode = font.encode(ELLIPSIS_STRING),\n      codePoints = _font$encode[0];\n\n  return parseInt(codePoints[0], 16);\n};\n/**\n * Trucante block with ellipsis\n *\n * @param  {number}  lines quantity\n * @param  {Object}  paragraph block\n * @return {Object} sliced paragraph block\n */\n\n\nvar truncate = function truncate(block) {\n  var _last, _last2, _last2$attributes;\n\n  var runs = ((_last = (0, _fns.last)(block)) === null || _last === void 0 ? void 0 : _last.runs) || [];\n  var font = (_last2 = (0, _fns.last)(runs)) === null || _last2 === void 0 ? void 0 : (_last2$attributes = _last2.attributes) === null || _last2$attributes === void 0 ? void 0 : _last2$attributes.font;\n\n  if (font) {\n    var _Object$assign;\n\n    var index = block.length - 1;\n    var codePoint = getEllipsisCodePoint(font);\n    var glyph = font.glyphForCodePoint(codePoint);\n    var lastBlock = (0, _append.default)(glyph, (0, _trim.default)(block[index]));\n    return Object.assign([], block, (_Object$assign = {}, _Object$assign[index] = lastBlock, _Object$assign));\n  }\n\n  return block;\n};\n\nvar _default = truncate;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","exports","__esModule","_fns","_trim","_append","ELLIPSIS_UNICODE","ELLIPSIS_STRING","String","fromCharCode","getEllipsisCodePoint","font","encode","_font$encode","codePoints","parseInt","truncate","block","_last","_last2","_last2$attributes","runs","last","attributes","_Object$assign","index","length","codePoint","glyph","glyphForCodePoint","lastBlock","Object","assign","_default"],"sources":["C:/Users/Pipe17/Desktop/practicaReact/loginfirebase/node_modules/@react-pdf/textkit/lib/block/truncate.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _fns = require(\"@react-pdf/fns\");\n\nvar _trim = _interopRequireDefault(require(\"../attributedString/trim\"));\n\nvar _append = _interopRequireDefault(require(\"../attributedString/append\"));\n\nvar ELLIPSIS_UNICODE = 8230;\nvar ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);\n/**\n * Get ellipsis codepoint. This may be different in standard and embedded fonts\n *\n * @param  {number}  font\n * @return {Object} ellipsis codepoint\n */\n\nvar getEllipsisCodePoint = function getEllipsisCodePoint(font) {\n  if (!font.encode) return ELLIPSIS_UNICODE;\n\n  var _font$encode = font.encode(ELLIPSIS_STRING),\n      codePoints = _font$encode[0];\n\n  return parseInt(codePoints[0], 16);\n};\n/**\n * Trucante block with ellipsis\n *\n * @param  {number}  lines quantity\n * @param  {Object}  paragraph block\n * @return {Object} sliced paragraph block\n */\n\n\nvar truncate = function truncate(block) {\n  var _last, _last2, _last2$attributes;\n\n  var runs = ((_last = (0, _fns.last)(block)) === null || _last === void 0 ? void 0 : _last.runs) || [];\n  var font = (_last2 = (0, _fns.last)(runs)) === null || _last2 === void 0 ? void 0 : (_last2$attributes = _last2.attributes) === null || _last2$attributes === void 0 ? void 0 : _last2$attributes.font;\n\n  if (font) {\n    var _Object$assign;\n\n    var index = block.length - 1;\n    var codePoint = getEllipsisCodePoint(font);\n    var glyph = font.glyphForCodePoint(codePoint);\n    var lastBlock = (0, _append.default)(glyph, (0, _trim.default)(block[index]));\n    return Object.assign([], block, (_Object$assign = {}, _Object$assign[index] = lastBlock, _Object$assign));\n  }\n\n  return block;\n};\n\nvar _default = truncate;\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAAP,CAAwDC,OAArF;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACD,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIG,IAAI,GAAGJ,OAAO,CAAC,gBAAD,CAAlB;;AAEA,IAAIK,KAAK,GAAGN,sBAAsB,CAACC,OAAO,CAAC,0BAAD,CAAR,CAAlC;;AAEA,IAAIM,OAAO,GAAGP,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAApC;;AAEA,IAAIO,gBAAgB,GAAG,IAAvB;AACA,IAAIC,eAAe,GAAGC,MAAM,CAACC,YAAP,CAAoBH,gBAApB,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAII,oBAAoB,GAAG,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;EAC7D,IAAI,CAACA,IAAI,CAACC,MAAV,EAAkB,OAAON,gBAAP;;EAElB,IAAIO,YAAY,GAAGF,IAAI,CAACC,MAAL,CAAYL,eAAZ,CAAnB;EAAA,IACIO,UAAU,GAAGD,YAAY,CAAC,CAAD,CAD7B;;EAGA,OAAOE,QAAQ,CAACD,UAAU,CAAC,CAAD,CAAX,EAAgB,EAAhB,CAAf;AACD,CAPD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIE,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;EACtC,IAAIC,KAAJ,EAAWC,MAAX,EAAmBC,iBAAnB;;EAEA,IAAIC,IAAI,GAAG,CAAC,CAACH,KAAK,GAAG,CAAC,GAAGf,IAAI,CAACmB,IAAT,EAAeL,KAAf,CAAT,MAAoC,IAApC,IAA4CC,KAAK,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,KAAK,CAACG,IAA/E,KAAwF,EAAnG;EACA,IAAIV,IAAI,GAAG,CAACQ,MAAM,GAAG,CAAC,GAAGhB,IAAI,CAACmB,IAAT,EAAeD,IAAf,CAAV,MAAoC,IAApC,IAA4CF,MAAM,KAAK,KAAK,CAA5D,GAAgE,KAAK,CAArE,GAAyE,CAACC,iBAAiB,GAAGD,MAAM,CAACI,UAA5B,MAA4C,IAA5C,IAAoDH,iBAAiB,KAAK,KAAK,CAA/E,GAAmF,KAAK,CAAxF,GAA4FA,iBAAiB,CAACT,IAAlM;;EAEA,IAAIA,IAAJ,EAAU;IACR,IAAIa,cAAJ;;IAEA,IAAIC,KAAK,GAAGR,KAAK,CAACS,MAAN,GAAe,CAA3B;IACA,IAAIC,SAAS,GAAGjB,oBAAoB,CAACC,IAAD,CAApC;IACA,IAAIiB,KAAK,GAAGjB,IAAI,CAACkB,iBAAL,CAAuBF,SAAvB,CAAZ;IACA,IAAIG,SAAS,GAAG,CAAC,GAAGzB,OAAO,CAACL,OAAZ,EAAqB4B,KAArB,EAA4B,CAAC,GAAGxB,KAAK,CAACJ,OAAV,EAAmBiB,KAAK,CAACQ,KAAD,CAAxB,CAA5B,CAAhB;IACA,OAAOM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,KAAlB,GAA0BO,cAAc,GAAG,EAAjB,EAAqBA,cAAc,CAACC,KAAD,CAAd,GAAwBK,SAA7C,EAAwDN,cAAlF,EAAP;EACD;;EAED,OAAOP,KAAP;AACD,CAjBD;;AAmBA,IAAIgB,QAAQ,GAAGjB,QAAf;AACAf,OAAO,CAACD,OAAR,GAAkBiC,QAAlB"},"metadata":{},"sourceType":"script"}