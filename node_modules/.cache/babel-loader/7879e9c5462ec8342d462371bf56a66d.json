{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _hyphen = _interopRequireDefault(require(\"hyphen\"));\n\nvar _enUs = _interopRequireDefault(require(\"hyphen/patterns/en-us\"));\n\nvar _fns = require(\"@react-pdf/fns\");\n\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = (0, _hyphen.default)(_enUs.default);\n\nvar splitHyphen = function splitHyphen(word) {\n  return word.split(SOFT_HYPHEN);\n};\n\nvar cache = {};\n\nvar getParts = function getParts(word) {\n  var base = word.includes(SOFT_HYPHEN) ? word : hyphenator(word);\n  return splitHyphen(base);\n};\n\nvar wordHyphenation = function wordHyphenation() {\n  return function (word) {\n    var cacheKey = \"_\" + word;\n    if ((0, _fns.isNil)(word)) return [];\n    if (cache[cacheKey]) return cache[cacheKey];\n    cache[cacheKey] = getParts(word);\n    return cache[cacheKey];\n  };\n};\n\nvar _default = wordHyphenation;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","exports","__esModule","_hyphen","_enUs","_fns","SOFT_HYPHEN","hyphenator","splitHyphen","word","split","cache","getParts","base","includes","wordHyphenation","cacheKey","isNil","_default"],"sources":["C:/Users/Pipe17/Desktop/practicaReact/loginfirebase/node_modules/@react-pdf/textkit/lib/engines/wordHyphenation/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _hyphen = _interopRequireDefault(require(\"hyphen\"));\n\nvar _enUs = _interopRequireDefault(require(\"hyphen/patterns/en-us\"));\n\nvar _fns = require(\"@react-pdf/fns\");\n\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = (0, _hyphen.default)(_enUs.default);\n\nvar splitHyphen = function splitHyphen(word) {\n  return word.split(SOFT_HYPHEN);\n};\n\nvar cache = {};\n\nvar getParts = function getParts(word) {\n  var base = word.includes(SOFT_HYPHEN) ? word : hyphenator(word);\n  return splitHyphen(base);\n};\n\nvar wordHyphenation = function wordHyphenation() {\n  return function (word) {\n    var cacheKey = \"_\" + word;\n    if ((0, _fns.isNil)(word)) return [];\n    if (cache[cacheKey]) return cache[cacheKey];\n    cache[cacheKey] = getParts(word);\n    return cache[cacheKey];\n  };\n};\n\nvar _default = wordHyphenation;\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAAP,CAAwDC,OAArF;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACD,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIG,OAAO,GAAGL,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,IAAIK,KAAK,GAAGN,sBAAsB,CAACC,OAAO,CAAC,uBAAD,CAAR,CAAlC;;AAEA,IAAIM,IAAI,GAAGN,OAAO,CAAC,gBAAD,CAAlB;;AAEA,IAAIO,WAAW,GAAG,MAAlB;AACA,IAAIC,UAAU,GAAG,CAAC,GAAGJ,OAAO,CAACH,OAAZ,EAAqBI,KAAK,CAACJ,OAA3B,CAAjB;;AAEA,IAAIQ,WAAW,GAAG,SAASA,WAAT,CAAqBC,IAArB,EAA2B;EAC3C,OAAOA,IAAI,CAACC,KAAL,CAAWJ,WAAX,CAAP;AACD,CAFD;;AAIA,IAAIK,KAAK,GAAG,EAAZ;;AAEA,IAAIC,QAAQ,GAAG,SAASA,QAAT,CAAkBH,IAAlB,EAAwB;EACrC,IAAII,IAAI,GAAGJ,IAAI,CAACK,QAAL,CAAcR,WAAd,IAA6BG,IAA7B,GAAoCF,UAAU,CAACE,IAAD,CAAzD;EACA,OAAOD,WAAW,CAACK,IAAD,CAAlB;AACD,CAHD;;AAKA,IAAIE,eAAe,GAAG,SAASA,eAAT,GAA2B;EAC/C,OAAO,UAAUN,IAAV,EAAgB;IACrB,IAAIO,QAAQ,GAAG,MAAMP,IAArB;IACA,IAAI,CAAC,GAAGJ,IAAI,CAACY,KAAT,EAAgBR,IAAhB,CAAJ,EAA2B,OAAO,EAAP;IAC3B,IAAIE,KAAK,CAACK,QAAD,CAAT,EAAqB,OAAOL,KAAK,CAACK,QAAD,CAAZ;IACrBL,KAAK,CAACK,QAAD,CAAL,GAAkBJ,QAAQ,CAACH,IAAD,CAA1B;IACA,OAAOE,KAAK,CAACK,QAAD,CAAZ;EACD,CAND;AAOD,CARD;;AAUA,IAAIE,QAAQ,GAAGH,eAAf;AACAd,OAAO,CAACD,OAAR,GAAkBkB,QAAlB"},"metadata":{},"sourceType":"script"}